extend type Query {
  """
  Gets the profile of a user. If no id argument is provided, will return the current authenticated user's profile (as extracted from the authorization header).
  """
  user(id: String): User

  """
  Get all (or search for specific) users from the server in a paginated view, if you have the server:admin role.
  The query looks for matches in name, company and email.
  """
  users(limit: Int! = 25, offset: Int! = 0, query: String = null): UserCollection
  """
  Search for users and return limited metadata about them, if you have the server:user role.
  The query looks for matches in name & email
  """
  userSearch(
    query: String!
    limit: Int! = 25
    cursor: String
    archived: Boolean = false
  ): UserSearchResultCollection
  userPwdStrength(pwd: String!): JSONObject
}

"""
Base user type.
"""
type User {
  id: String!
  suuid: String
  email: String
  name: String
  bio: String
  company: String
  avatar: String
  verified: Boolean
  profiles: JSONObject
  role: String
}

type UserCollection {
  totalCount: Int!
  items: [User]
}

type UserSearchResultCollection {
  cursor: String
  items: [UserSearchResult]
}

type UserSearchResult {
  id: String!
  name: String
  bio: String
  company: String
  avatar: String
  verified: Boolean
}

extend type Mutation {
  """
  Edits a user's profile.
  """
  userUpdate(user: UserUpdateInput!): Boolean!

  """
  Delete a user's account.
  """
  userDelete(userConfirmation: UserDeleteInput!): Boolean!
    @hasRole(role: "server:user")
    @hasScope(scope: "profile:delete")

  adminDeleteUser(userConfirmation: UserDeleteInput!): Boolean!
    @hasRole(role: "server:admin")

  userRoleChange(userRoleInput: UserRoleInput!): Boolean! @hasRole(role: "server:admin")
}

input UserRoleInput {
  id: String!
  role: String!
}

input UserUpdateInput {
  name: String
  company: String
  bio: String
  avatar: String
}

input UserDeleteInput {
  email: String
}
